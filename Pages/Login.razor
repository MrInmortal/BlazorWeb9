@page "/login"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@using System.Text.Json
@using Blazored.LocalStorage

@if (isAuthenticated)
{
    NavigationManager.NavigateTo("/vivencias");
}
else
{
    <div class="form-wrapper">
        <div class="form-box">
            <h2>Iniciar Sesión</h2>
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="input-group">
                    <label for="username">Usuario</label>
                    <input id="username" @bind="loginModel.Username" />
                </div>
                <div class="input-group">
                    <label for="password">Contraseña</label>
                    <input id="password" type="password" @bind="loginModel.Password" />
                </div>
                <button type="submit" class="btn-primary">Iniciar Sesión</button>
            </EditForm>
            <p class="redirect">
                ¿No tienes una cuenta? <a href="/registro">Regístrate aquí</a>
            </p>
        </div>
    </div>
}

@code {
    private LoginModel loginModel = new();
    private bool isAuthenticated = false;

    private async Task HandleLogin()
    {
        var usersJson = await LocalStorage.GetItemAsync<string>("users");
        var users = string.IsNullOrEmpty(usersJson) ? new List<User>() : JsonSerializer.Deserialize<List<User>>(usersJson);

        var user = users?.FirstOrDefault(u => u.Username == loginModel.Username && u.Password == loginModel.Password);
        if (user != null)
        {
            await LocalStorage.SetItemAsync("currentUser", JsonSerializer.Serialize(user));
            isAuthenticated = true;
            NavigationManager.NavigateTo("/vivencias");
        }
        else
        {
            Console.WriteLine("Credenciales inválidas");
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class User
    {
        public string Username { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
    }
}

<style>
    .form-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .form-box {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
        width: 300px;
        text-align: center;
    }

        .form-box h2 {
            font-size: 24px;
            margin-bottom: 20px;
        }

    .input-group {
        margin-bottom: 15px;
        text-align: left;
    }

        .input-group label {
            font-size: 14px;
            color: #333;
        }

        .input-group input {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

    .btn-primary {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .redirect {
        margin-top: 10px;
        font-size: 14px;
    }

        .redirect a {
            color: #007bff;
            text-decoration: none;
        }

            .redirect a:hover {
                text-decoration: underline;
            }
</style>
